extends layout

block content
  .uk-container

    .header-transparent
      .menu-home
        a(href="/")
          .menu-icon
              span(uk-icon="icon: home")

    .dashb_section.extra-margin
        .uk-card.uk-card-default.uk-card-body.card-border-radius
            ul.uk-subnav.uk-subnav-pill
                li#fhistory(onclick='toggle_wrapper("findhistory", "fhistory");') 
                    a(href='#') Historical Data
                li#ctest(onclick='toggle_wrapper("createtest", "ctest");')
                    a(href='#') Create Test
                li#comptest(onclick='toggle_wrapper("comparetest", "comptest");')
                    a(href='#') Compare Frameworks

    //create and run bigdata test
    .container_wrapper#createtest
        .dashb_section.min-margin
            .uk-card.uk-card-default.uk-card-body.card-border-radius
                .uk-card-title
                    | Create Test 
                .uk-margin
                    p Select Processing Method
                    .uk-margin
                    select.uk-select#selectmethod(onchange='updateframework();') 
                        option(value='batch') Batch-only
                        option(value='stream') Stream-only
                        //option(value='hybrid') Hybrid
                .uk-margin
                    p Select framework
                    .uk-margin
                    select.uk-select#selectframework 
                
                .uk-margin
                    button.uk-button.uk-button-primary(type="submit" onclick='scheduledTasks();') Add Test
        
        .dashb_section.min-margin
            .uk-card.uk-card-default.uk-card-body.card-border-radius
                .uk-card-title
                    | Scheduled Tests
                
                //schedule list goes here
                .uk-margin#scheduledtasks
                .uk-margin
                    form(method='post' action='/sorter')
                        input#secretinput(type='hidden' name='jobs' value='')
                        //a(href="/progress")
                        button.uk-button.uk-button-primary(type="submit") Run Tests
                        button.uk-button.uk-button-default.uk-float-right(type="button" onclick='clearList();') Clear List
    
    //Wrapper to find history of each bigdata
    .container_wrapper#findhistory
        .dashb_section.min-margin
            .uk-card.uk-card-default.uk-card-body.card-border-radius
                .uk-card-title
                    | Historical Data of Big data frameworks
                .uk-margin
                    .uk-card.uk-card-default.uk-card-body
                        .uk-card-title Apache Hadoop
                        img(src='/img/hadoop.png' width='200' height='100')
                        p 
                            | Apache Hadoop is a framework for processing batch data. Uses MapReduce as its main processing engine.     
                            b Advantage:
                            |  Capable of handling enormous data-sets. 
                            b Limitations:
                            |  Reading and writing multiple times is slow and resource consuming
                        a(href='/history?reqdb=hadoop')
                            button.uk-button.uk-button-primary Batch History

                .uk-margin
                    .uk-card.uk-card-default.uk-card-body
                        .uk-card-title Apache Storm
                        img(src='/img/storm.png' width='200' height='100')
                        p 
                            | Apache Storm is a stream processing framework for extremely low latency workloads and new real-time processing. Can handle large quantity of data and deliver result with low latency.
                            b  Advantage: 
                            | Near real-time processing.
                            | Extremely low latency for workloads.
                            b  Limitations:
                            | Does not offer ordering guarantees of messages
                        a(href='/history?reqdb=storm')
                            button.uk-button.uk-button-primary Stream History

                .uk-margin
                    .uk-card.uk-card-default.uk-card-body
                        .uk-card-title Apache Samza
                        img(src='/img/samza.png' width='200' height='100')
                        p 
                            | Apache Samza is a stream processing framework that uses Apache Kafka messaging system. With Kafka, Samza can provide fault tolerance, buffering and state storage. 
                            b Advantages:
                            |  Kafka provides replication of data that can be accessed with low latency.
                            |  Kafka also eliminate the problems of back-pressure. 
                            b Limitations:
                            |  Does not provide accurate recovery of aggregate states(like count) in the event of failure.
                        a(href='/history?reqdb=samza')
                            button.uk-button.uk-button-primary Stream History

                .uk-margin
                    .uk-card.uk-card-default.uk-card-body
                        .uk-card-title Apache Spark
                        img(src='/img/spark.png' width='200' height='100')
                        p 
                            | Apache Spark is a hybrid processing framework that allows both stream and batch processing. Process all data in memory yielding faster processing. 
                            b Advantages:
                            |  Uses full in memory computations and processing optimization.
                            |  Can be deployed as a standalone cluster or integrate with existing hadoop cluster. 
                            b Limitations:
                            |  Spark can cost more to run than a disk-based system.
                        a(href='/history?reqdb=spark')
                            button.uk-button.uk-button-primary Batch History
                        a(href='/history?reqdb=spark_stream')
                            button.uk-button.uk-button-primary Stream History
                        

                .uk-margin
                    .uk-card.uk-card-default.uk-card-body
                        .uk-card-title Apache Flink
                        img(src='/img/flink.png' width='200' height='100')
                        p 
                            | Apache Flink is a hybrid processing framework that is capable of handling stream and batch tasks. Considers batch as a subset of stream processing. 
                            b Advantages:
                            |  Provide low-latency, high-throughput, and real entry-by-entry processing.
                            |  Provide a web-based scheduling view for easily manage tasks and view the system. 
                            b Limitations:
                            |  Uses micro-batch architecture so might not be appropriate for many use-cases. 
                        a(href='/history?reqdb=flink')
                            button.uk-button.uk-button-primary Batch History
                        a(href='/history?reqdb=flink_stream')
                            button.uk-button.uk-button-primary Stream History


    //compare bidata
    .container_wrapper#comparetest
        .dashb_section.min-margin
            .uk-card.uk-card-default.uk-card-body.card-border-radius
                .uk-card-title
                    | Compare Frameworks
                .uk-margin
                    p Select Processing Method
                    .uk-margin
                    select.uk-select#selectmethodcomp(onchange='updateframeworkComp();') 
                        option(value='batch') Batch-only
                        option(value='stream') Stream-only
                        //option(value='hybrid') Hybrid
                .uk-margin
                    p Select framework
                    .uk-margin
                    select.uk-select#selectframeworkcomp
                
                .uk-margin
                    button.uk-button.uk-button-primary(type="submit" onclick='scheduledTasksComp();') Add to list
        
        .dashb_section.min-margin
            .uk-card.uk-card-default.uk-card-body.card-border-radius
                .uk-card-title
                    | Scheduled Comparisons
                
                //schedule list goes here
                .uk-margin#scheduledtaskscomp
                .uk-margin
                    form(method='post' action='/compare')
                        input#secretinputcomp(type='hidden' name='comp' value='')
                        //a(href="/progress")
                        button.uk-button.uk-button-primary(type="submit") Compare
                        button.uk-button.uk-button-default.uk-float-right(type="button" onclick='clearListComp();') Clear List



  script.
    //document onload actions
    window.onload = function(){
        //update frameworks
        updateframework();
        updateframeworkComp();
        
        var openid = getopenid();
        var opentab= getopentab();
        defaultcard(openid, opentab);
    }
    
    //localstorage 
    function storewrapper(openid, opentab){
        localStorage.setItem('openid', openid);
        localStorage.setItem('opentab', opentab);
    }

    function getopenid(){
        return localStorage.getItem('openid');
    }

    function getopentab(){
        return localStorage.getItem('opentab');
    }

    //empty the options
    function resetOptions(id){
        var options = id.options;
        options.length = 0;
    }


    //update framework list:: for running tests
    function updateframework(){
        var selected = document.getElementById('selectmethod').value;
        var frameworks = document.getElementById('selectframework');
        //reset the options
        resetOptions(frameworks);


        //add otions
        var hadoop = document.createElement('option');
        hadoop.value = 'hadoop';
        hadoop.text  = 'Apache Hadoop';

        var storm = document.createElement('option');
        storm.value = 'storm';
        storm.text  = 'Apache Storm';

        var samza = document.createElement('option');
        samza.value = 'samza';
        samza.text  = 'Apache Samza';

        var spark = document.createElement('option');
        spark.value = 'spark';
        spark.text  = 'Apache Spark';

        var flink = document.createElement('option');
        flink.value = 'flink';
        flink.text  = 'Apache Flink';

        if(selected == "batch"){
            //console.log("batch selected")
            frameworks.add(hadoop, null);
            frameworks.add(spark, null);
            frameworks.add(flink, null);
        }else if(selected == "stream"){
            //console.log("stream selected")
            frameworks.add(storm, null);
            frameworks.add(samza, null);
            frameworks.add(spark, null);
            frameworks.add(flink, null);
        }
        //- }else if(selected == "hybrid"){
        //-     //console.log("hybrid selected")
        //-     frameworks.add(spark, null);
        //-     frameworks.add(flink, null);
        //- }
        else{
            console.log("nothing selected")
        }
    }

    /** global var **/
    var schedule = [];

    //schedule the tasks for executing
    function scheduledTasks(){
        var process = document.getElementById('selectmethod').value;
        var framework = document.getElementById('selectframework').value;

        var sch = {
            "job" : {
                "method": process,
                "framework" : framework
            }
        }

        //add the job to list
        schedule.push(sch);
        
        //update the schedule list
        updateList();

        console.log(schedule);
    }

    //clear the jobs
    function clearList(){
        schedule = [];
        updateList();

        console.log(schedule);
    }

    //update the scheduled list dynamically
    function updateList(){
        var scheduler = document.getElementById('scheduledtasks');
        //enter the updated list into post input
        var secretjob = document.getElementById('secretinput').value = JSON.stringify(schedule);
        
        //empty before update
        scheduler.innerHTML = "";
        for(var i = 0; i < schedule.length; i++){
            var content = "<div class='sch-test-cont'><b>Test "+ (i+1) +"</b>&nbsp&nbsp&nbsp&nbsp <b>Apache "+schedule[i].job.framework+"</b> | "+schedule[i].job.method+"</div>";

            //add the job to list
            scheduler.innerHTML += content;
        }
    }

    /***/

    //display default card
    function defaultcard(openid, opentab){
        if(openid == null){
            document.getElementById('findhistory').style.display = 'block';
        }else{
            document.getElementById(opentab).classList.add('uk-active');
            document.getElementById(openid).style.display = 'block';
        }
    }

    //clear all visibility wrappers
    function hide(){
        var ctest = document.getElementById('createtest');
        var fhistory = document.getElementById('findhistory');
        var comptest = document.getElementById('comparetest');

        document.getElementById('ctest').classList.remove('uk-active');
        document.getElementById('fhistory').classList.remove('uk-active');
        document.getElementById('comptest').classList.remove('uk-active');

        ctest.style.display = 'none';
        fhistory.style.display = 'none';
        comptest.style.display = 'none';
    }

    function toggle_wrapper(displayid, displaytab){
        hide();
        storewrapper(displayid, displaytab);
        document.getElementById(displayid).style.display = 'block';
        document.getElementById(displaytab).classList.add('uk-active');
    }
