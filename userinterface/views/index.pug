extends layout

block content
  .uk-container

    .header-transparent
      .menu-home
        a(href="/")
          .menu-icon
              span(uk-icon="icon: home")
      
      .sysinfo
        .uk-label.uk-label-success
          | cpu: #{cpu}
        br
        .uk-label.uk-label-success
          | mem: #{mem}

    .dashb_section.extra-margin
      .uk-card.uk-card-default.uk-card-body.card-border-radius
        .uk-card-title
            | Run Test 
        .uk-margin
            p Select Processing Method
            .uk-margin
              select.uk-select#selectmethod(onchange='updateframework();') 
                option(value='batch') Batch-only
                option(value='stream') Stream-only
                option(value='hybrid') Hybrid
        .uk-margin
            p Select framework
            .uk-margin
              select.uk-select#selectframework 
        
        .uk-margin
            button.uk-button.uk-button-primary(type="submit") Add Test
    
    .dashb_section.min-margin
      .uk-card.uk-card-default.uk-card-body.card-border-radius
        .uk-card-title
            | Scheduled Tests
        .uk-margin
            .sch-test-cont 
              b Test 1
              | Hadoop | Batch | Stream data asdasd asdasd asdasd
        .uk-margin
            .sch-test-cont 
              b Test 1
              | Hadoop | Batch | Stream data asdasd asdasd asdasd
        .uk-margin
            .sch-test-cont 
              b Test 1
              | Hadoop | Batch | Stream data asdasd asdasd asdasd
        
        .uk-margin
          a(href="/progress")
            button.uk-button.uk-button-primary(type="submit") Run Test

  script.
    var bar = document.getElementById('js-progress');

    UIkit.upload('.js-upload', {

        url: '',
        multiple: true,

        beforeSend: function () {
            console.log('beforeSend', arguments);
        },
        beforeAll: function () {
            console.log('beforeAll', arguments);
        },
        load: function () {
            console.log('load', arguments);
        },
        error: function () {
            console.log('error', arguments);
        },
        complete: function () {
            console.log('complete', arguments);
        },

        loadStart: function (e) {
            console.log('loadStart', arguments);

            bar.removeAttribute('hidden');
            bar.max = e.total;
            bar.value = e.loaded;
        },

        progress: function (e) {
            console.log('progress', arguments);

            bar.max = e.total;
            bar.value = e.loaded;
        },

        loadEnd: function (e) {
            console.log('loadEnd', arguments);

            bar.max = e.total;
            bar.value = e.loaded;
        },

        completeAll: function () {
            console.log('completeAll', arguments);

            setTimeout(function () {
                bar.setAttribute('hidden', 'hidden');
            }, 1000);

            //alert('Upload Completed');
        }

    });

    //document onload actions
    window.onload = function(){
        //update frameworks
        updateframework();


    }

    //empty the options
    function resetOptions(id){
        var options = id.options;
        options.length = 0;
    }


    //update framework list
    function updateframework(){
        var selected = document.getElementById('selectmethod').value;
        var frameworks = document.getElementById('selectframework');
        //reset the options
        resetOptions(frameworks);


        //add otions
        var hadoop = document.createElement('option');
        hadoop.value = 'hadoop';
        hadoop.text  = 'Apache Hadoop';

        var storm = document.createElement('option');
        storm.value = 'storm';
        storm.text  = 'Apache Storm';

        var samza = document.createElement('option');
        samza.value = 'samza';
        samza.text  = 'Apache Samza';

        var spark = document.createElement('option');
        spark.value = 'spark';
        spark.text  = 'Apache Spark';

        var flink = document.createElement('option');
        flink.value = 'flink';
        flink.text  = 'Apache Flink';

        if(selected == "batch"){
            console.log("batch selected")
            frameworks.add(hadoop, null);
        }else if(selected == "stream"){
            console.log("stream selected")
            frameworks.add(storm, null);
            frameworks.add(samza, null);
        }else if(selected == "hybrid"){
            console.log("hybrid selected")
            frameworks.add(spark, null);
            frameworks.add(flink, null);
        }else{
            console.log("nothing selected")
        }
    }